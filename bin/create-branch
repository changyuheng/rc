#!/usr/bin/env bash
# repo-create-branch

usage() {
	cat <<EOT
Usage:
	$0 [-h|--help]
	$0 <branch_name>
	$0 <branch_name> [manifest]
	$0 [ -r <remote> ] <branch_name> [manifest]
	$0 [-s|--skip] [-f|--force] <branch_name> [manifest]
	$0 [ -r <remote> ] [-s|--skip] [-f|--force] <branch_name> [manifest]

Example:
	$0 houston_fake7140
	$0 houston_fake7140 daily/2012-01-05.xml
	$0 -r gbc_official houston_fake7140
	$0 -r gbc_official houston_fake7140 daily/2012-01-05.xml
	$0 -s -f houston_10982303 # forced re-initialize manifest
EOT
}

##
# ARGS=`getopt -a -o I:D:T:e:k:LMSsth -l instence:,database:,table:,excute:,key:,list,master,slave,status,tableview,help -- "$@"`
# [ $? -ne 0 ] && usage
# #set -- "${ARGS}"
# eval set -- "${ARGS}"
##
OPTS=`getopt -a -o h?sfr:d -l help,skip,force,remote:,debug -- "$@"`
if [ "$?" != 0 ]; then
	echo "FATAL ERROR: get options error." >&2
	exit 1
fi
eval set -- "$OPTS"
while true ; do
	case "$1" in
		-h|--help|?)
			usage
			exit 0
			;;
		-r|--remote)
			remote="$2"
			shift 2;;
		-s|--skip)
			skip="1"
			shift;;
		-f|--force)
			force="-f "
			shift;;
		-d|--debug)
			debug="1"
			shift;;
		--) shift; break;;
	esac
done

branch="$1"
[ "$branch" ] || ( usage ; exit 1 )

manifest="default.xml"
[ "$2" ] && manifest="$2"

tag="$branch-init"

# DEBUG options {{{
#debug=1
if [ "$debug" ]; then
	echo "branch \"$branch\""
	echo "manifest \"$manifest\""
	echo "tag \"$tag\""
	echo "remote \"$remote\""
	echo "force \"$force\""
	echo "skip \"$skip\""

	exit
fi
# }}}

if [ ! "$skip" ]; then
	echo 1
	repo forall -c "git clear; git checkout \"`git rev-parse HEAD`\"" > /dev/null 2>&1
	repo sync -l -j4 > /dev/null 2>&1

	echo 2
	repo init -m "$manifest" > /dev/null 2>&1
	repo forall -c "git branch -D _tmp; git branch _tmp; git tag -d \"$tag\"; git tag -m \"init $branch tag\" \"$tag\" _tmp ;" > /dev/null 2>&1
	repo forall -c "git push $force gbc_official \"$tag\":\"$tag\" ; git push $force gbc_official _tmp:\"$branch\";"

	echo 3
	repo forall -c "git clear; git checkout \"`git rev-parse HEAD`\"" > /dev/null 2>&1
	repo forall -c "git branch -D _tmp; " > /dev/null 2>&1

	repo forall -c "git tag -d \"$tag\"" > /dev/null 2>&1
fi

# manifest {{{
. ~/.andrc
croot

echo 4
pushd .repo/manifests
git branch -D _tmp > /dev/null 2>&1
git checkout -b _tmp > /dev/null 2>&1
echo 5
#sed -i "s#\(^.*<default\s\+\w*\s*remote=\"gbc_official\"\s\+\w*\s*revision=\"\)[^\"]*\(\"\s*\w*\s*/>\)#$branch#" default.xml > /dev/null 2>&1
if [ "$remote" ]; then
	sed -i "s#\(^.*<default\s\+remote=\"\)[^\"]*\(\"\s\+revision=\"\)[^\"]*\(\"\s*\w*\s*/>\)#\\1$remote\\2$branch\\3#" default.xml > /dev/null 2>&1
else
	sed -i "s#\(^.*<default\s\+remote=\"[^\"]*\"\s\+revision=\"\)[^\"]*\(\"\s*\w*\s*/>\)#\\1$branch\\2#" default.xml > /dev/null 2>&1
fi
git commit -a -m "init $branch" > /dev/null 2>&1
git push origin $force _tmp:"$branch"

echo 6
if [ "$remote" ]; then
	sed -i "s#\(^.*<default\s\+remote=\"\)[^\"]*\(\"\s\+revision=\"\)[^\"]*\(\"\s*\w*\s*/>\)#\\1$remote\\2refs/tags/$tag\\3#" default.xml > /dev/null 2>&1
else
	sed -i "s#\(^.*<default\s\+remote=\"[^\"]*\"\s\+revision=\"\)[^\"]*\(\"\s*\w*\s*/>\)#\\1refs/tags/$tag\\2#" default.xml > /dev/null 2>&1
fi
git commit -a -m "init $tag tag" > /dev/null 2>&1
git tag -d "$tag" > /dev/null 2>&1
git tag -m "init $tag tag" "$tag" > /dev/null 2>&1
git push origin $force "$tag":"$tag"

echo 7
git reset --hard > /dev/null 2>&1
git checkout default > /dev/null 2>&1
git reset --hard origin/default > /dev/null 2>&1
git branch -D _tmp > /dev/null 2>&1
popd
# manifest }}}

