#!/usr/bin/env bash
# repo-create-branch

me="`readlink -f $0`"
. "`dirname $me`/shflags"

die() {
	[ "$#" -gt 0 ] && echo "error: $@" >&2
	flags_help
	exit 1
}

has() {
	local ret="1"

	[ "$1" ] || return "$ret"
	[ "$1" -eq "${FLAGS_FALSE}" ] && return "$ret"

	ret="0"
	return "$ret"
}

DEFINE_boolean 'force' false 'Forced update' 'f'
DEFINE_boolean 'skip' false 'Skip working tree, process manifest only' 's'
DEFINE_string 'remote' 'gbc_official' 'Specify remote name' 'r'
DEFINE_boolean 'debug' false 'Enable debug mode' 'd'
DEFINE_boolean 'network' false 'Network sync' 'n'
DEFINE_boolean 'tag' false 'tag for each repository' 't'

FLAGS_HELP=`cat <<EOT
Usage:
	$0 [-h|--help]
	$0 <branch_name>
	$0 <branch_name> [manifest]
	$0 [ -r <remote> ] <branch_name> [manifest]
	$0 [-s|--skip] [-f|--force] <branch_name> [manifest]
	$0 [ -r <remote> ] [-s|--skip] [-f|--force] <branch_name> [manifest]

Example:
	$0 houston_fake7140
	$0 houston_fake7140 daily/2012-01-05.xml
	$0 -r gbc_official houston_fake7140
	$0 -r gbc_official houston_fake7140 daily/2012-01-05.xml
	$0 -s -f houston_10982303 # forced re-initialize manifest
EOT`

FLAGS "$@" || exit 1
eval set -- "${FLAGS_ARGV}"

has "${FLAGS_help}" && exit 0

branch="$1"
[ "$branch" ] || die
tag="$branch-init"

manifest="default.xml"
[ "$2" ] && manifest="$2"

remote="${FLAGS_remote}"
has "${FLAGS_force}" && force="-f"
has "${FLAG_network}" || network="-l"

# DEBUG options {{{
#debug=1
if [ "$debug" ]; then
	echo "branch \"$branch\""
	echo "manifest \"$manifest\""
	echo "tag \"$tag\""
	echo "remote \"$remote\""
	echo "force \"$force\""
	echo "debug \"$debug\""
	echo "help \"$help\""

	exit
fi
# }}}

# manifest {{{
if [ -f ~/.andrc ]; then
	. ~/.andrc
elif [ -f build/envsetup.sh ]; then
	. build/envsetup.sh
else
	die "envsetup failed"
fi

croot || die "croot failed"

echo 4
pushd ".repo/manifests"
git checkout default
git branch -D _tmp
git checkout -b _tmp

echo 5
repo manifest -r -o "${tag}.xml"
git add "${tag}.xml"
git commit -am "Import ${tag}.xml"

#sed -i "s#\(^.*<default\s\+\w*\s*remote=\"gbc_official\"\s\+\w*\s*revision=\"\)[^\"]*\(\"\s*\w*\s*/>\)#$branch#" default.xml > /dev/null 2>&1
if [ "$remote" ]; then
	sed -i "s#\(^.*<default\s\+remote=\"\)[^\"]*\(\"\s\+revision=\"\)[^\"]*\(\"\s*\w*\s*/>\)#\\1$remote\\2$branch\\3#" default.xml > /dev/null 2>&1
else
	sed -i "s#\(^.*<default\s\+remote=\"[^\"]*\"\s\+revision=\"\)[^\"]*\(\"\s*\w*\s*/>\)#\\1$branch\\2#" default.xml > /dev/null 2>&1
fi
git commit -a -m "init $branch" > /dev/null 2>&1
git push origin $force _tmp:"$branch"

echo 6
if has "${FLAGS_tag}"; then
	if [ "$remote" ]; then
		sed -i "s#\(^.*<default\s\+remote=\"\)[^\"]*\(\"\s\+revision=\"\)[^\"]*\(\"\s*\w*\s*/>\)#\\1$remote\\2refs/tags/$tag\\3#" default.xml > /dev/null 2>&1
	else
		sed -i "s#\(^.*<default\s\+remote=\"[^\"]*\"\s\+revision=\"\)[^\"]*\(\"\s*\w*\s*/>\)#\\1refs/tags/$tag\\2#" default.xml > /dev/null 2>&1
	fi
	git commit -a -m "init $tag tag" > /dev/null 2>&1
	git tag -d "$tag" > /dev/null 2>&1
	git tag -m "init $tag tag" "$tag" > /dev/null 2>&1
	git push origin $force "$tag":"$tag"
fi

echo 7
git reset --hard > /dev/null 2>&1
git checkout default > /dev/null 2>&1
git reset --hard origin/default > /dev/null 2>&1
git branch -D _tmp > /dev/null 2>&1
popd
# manifest }}}

if ! has "${FLAGS_skip}"; then
	echo 1
	repo sync -d ${network} -j4 > /dev/null 2>&1
	repo forall -c "git clear; git checkout \$(git rev-parse HEAD)" > /dev/null 2>&1

	echo 2
	repo init -m "$manifest" > /dev/null 2>&1
	repo forall -c "git branch -D _tmp; git branch _tmp; " > /dev/null 2>&1
	if has "${FLAGS_tag}"; then
		repo forall -c "git tag -d \"$tag\"; git tag -m \"init $branch tag\" \"$tag\" _tmp" > /dev/null 2>&1
		repo forall -c "git push $force $remote \"$tag\":\"$tag\""
		repo forall -c "git tag -d \"$tag\"" > /dev/null 2>&1
	fi
	repo forall -c "git push $force \"$remote\" _tmp:\"$branch\""

	echo 3
	repo forall -c "git clear; git checkout \$(git rev-parse HEAD)" > /dev/null 2>&1
	repo forall -c "git branch -D _tmp; " > /dev/null 2>&1
fi

